-- Shopping Trends Data Analysis Project
-- Author: Kartik K. N
-- Database: shopping_trends_db
-- Description: SQL project to analyze shopping behavior, spending patterns, and customer insights.

-- Create a Database 
CREATE DATABASE IF NOT EXISTS shopping_trends_db;
USE shopping_trends_db;

-- Create a Table
CREATE TABLE shopping_trends (
    Customer_ID INT,
    Age INT,
    Gender VARCHAR(10),
    Item_Purchased VARCHAR(100),
    Category VARCHAR(50),
    Purchase_Amount_USD DECIMAL(10,2),
    Location VARCHAR(100),
    Size VARCHAR(10),
    Color VARCHAR(30),
    Season VARCHAR(20),
    Review_Rating FLOAT,
    Subscription_Status VARCHAR(10),
    Payment_Method VARCHAR(50),
    Shipping_Type VARCHAR(50),
    Discount_Applied VARCHAR(5),
    Promo_Code_Used VARCHAR(5),
    Previous_Purchases INT,
    Preferred_Payment_Method VARCHAR(50),
    Frequency_of_Purchases VARCHAR(50)
);

-- Split the Table
-- Create Customers Table
CREATE TABLE customers (
    Customer_ID INT PRIMARY KEY,
    Age INT,
    Gender VARCHAR(10),
    Location VARCHAR(100),
    Subscription_Status VARCHAR(10),
    Preferred_Payment_Method VARCHAR(50),
    Frequency_of_Purchases VARCHAR(50)
);

-- Insert Data into Customers Table
INSERT INTO customers
SELECT DISTINCT
    Customer_ID, Age, Gender, Location,
    Subscription_Status, Preferred_Payment_Method, Frequency_of_Purchases
FROM shopping_trends;

-- Create Table
CREATE TABLE products (
    Product_ID INT AUTO_INCREMENT PRIMARY KEY,
    Item_Purchased VARCHAR(100),
    Category VARCHAR(50),
    Size VARCHAR(10),
    Color VARCHAR(30)
);

-- Insert Data into Products Table
INSERT INTO products (Item_Purchased, Category, Size, Color)
SELECT DISTINCT Item_Purchased, Category, Size, Color
FROM shopping_trends;

-- Create Transations Table 
CREATE TABLE transactions (
    Transaction_ID INT AUTO_INCREMENT PRIMARY KEY,
    Customer_ID INT,
    Item_Purchased VARCHAR(100),
    Purchase_Amount_USD DECIMAL(10,2),
    Season VARCHAR(20),
    Review_Rating FLOAT,
    Payment_Method VARCHAR(50),
    Shipping_Type VARCHAR(50),
    Discount_Applied VARCHAR(5),
    Promo_Code_Used VARCHAR(5),
    Previous_Purchases INT,
    FOREIGN KEY (Customer_ID) REFERENCES customers(Customer_ID)
);

-- Insert Data into Transations Table
INSERT INTO transactions (
    Customer_ID, Item_Purchased, Purchase_Amount_USD, Season, Review_Rating, 
    Payment_Method, Shipping_Type, Discount_Applied, Promo_Code_Used, Previous_Purchases
)
SELECT 
    Customer_ID, Item_Purchased, Purchase_Amount_USD, Season, Review_Rating, 
    Payment_Method, Shipping_Type, Discount_Applied, Promo_Code_Used, Previous_Purchases
FROM shopping_trends
WHERE Customer_ID IS NOT NULL AND Item_Purchased IS NOT NULL;

-- Check How many duplicates you’ll delete first
SELECT COUNT(*) AS duplicate_rows
FROM transactions
WHERE Transaction_ID NOT IN (
  SELECT Transaction_ID
  FROM (
    SELECT MIN(Transaction_ID) AS Transaction_ID
    FROM transactions
    GROUP BY Customer_ID, Item_Purchased, Purchase_Amount_USD
  ) AS temp
);

-- Q1. Find and remove duplicate transactions (if any)
DELETE FROM transactions
WHERE Transaction_ID NOT IN (
  SELECT MIN(Transaction_ID)
  FROM transactions
  GROUP BY Customer_ID, Item_Purchased, Purchase_Amount_USD
);

-- Check before updating
SELECT COUNT(*) AS Missing_Ratings
FROM transactions
WHERE Review_Rating IS NULL;

-- Q2. Identify and fill missing Review Ratings with average rating
UPDATE transactions
SET Review_Rating = (
  SELECT ROUND(AVG(Review_Rating), 1)
  FROM transactions
  WHERE Review_Rating IS NOT NULL
)
WHERE Review_Rating IS NULL;

-- Q3. Find total revenue generated by each product category
SELECT p.Category,sum(Purchase_Amount_USD) AS Total_Revenue
FROM transactions t
JOIN products p USING(Item_Purchased)
GROUP BY p.Category
ORDER BY Total_Revenue DESC;

-- Q4. Calculate average spending per customers
SELECT c.Customer_ID, ROUND(AVG(t.Purchase_Amount_USD), 2) AS Avg_Spending
FROM customers c
JOIN transactions t USING(Customer_ID)
GROUP BY c.Customer_ID
ORDER BY Avg_Spending DESC;

-- Q5. Find the most popular payment method
SELECT Payment_Method,count(Payment_Method) AS Popular_Payment
FROM transactions 
GROUP BY Payment_Method
ORDER BY Popular_Payment DESC
LIMIT 1;

-- Q6. List customers who haven’t made any transactions
SELECT c.Customer_ID, c.Gender, c.Location
FROM customers c
LEFT JOIN transactions t USING (Customer_ID)
WHERE t.Customer_ID IS NULL;

-- Q7. Find customers who used promo codes and got discounts
SELECT c.Customer_ID,c.Gender,t.Promo_Code_Used,t.Discount_Applied,t.Purchase_Amount_USD
FROM customers c
JOIN transactions t USING(customer_ID)
WHERE t.Promo_Code_Used = "Yes" AND t.Discount_Applied = "Yes";

-- Q8. Rank customers by total purchase amount
SELECT c.Customer_ID,sum(t.Purchase_Amount_USD),DENSE_RANK()OVER(ORDER BY SUM(t.Purchase_Amount_USD) DESC)  AS Spending_Rank
FROM customers c
JOIN transactions t USING(Customer_ID)
GROUP BY c.Customer_ID;

-- Q9. Find cumulative revenue by season
SELECT Season,SUM(Purchase_Amount_USD) OVER (PARTITION BY Season ORDER BY Purchase_Amount_USD) AS Cumulative_Revenue
FROM transactions;

-- Q10. Find customers who spent above average overall
SELECT Customer_ID, SUM(Purchase_Amount_USD) AS Total_Spent
FROM transactions
GROUP BY Customer_ID
HAVING SUM(Purchase_Amount_USD) > (SELECT AVG(Purchase_Amount_USD) FROM transactions)
ORDER BY Total_Spent DESC;

-- Q11. Find top 5 highest-grossing products
SELECT Item_Purchased,Total_Sales
FROM (SELECT Item_Purchased,SUM(Purchase_Amount_USD) AS Total_Sales,DENSE_RANK() OVER (ORDER BY SUM(Purchase_Amount_USD) DESC) AS Sales_Rank
      FROM transactions
      GROUP BY Item_Purchased
      )ranked_sales
WHERE Sales_Rank LIMIT 5;

-- Q12. Find locations with above-average number of customers
SELECT Location, COUNT(DISTINCT Customer_ID) AS Total_Customers
FROM customers
GROUP BY Location
HAVING COUNT(DISTINCT Customer_ID) > (SELECT AVG(CustomerCount)
  FROM (SELECT COUNT(DISTINCT Customer_ID) AS CustomerCount
        FROM customers
        GROUP BY Location) AS sub
	    );
        
-- Q13. Identify top 5 loyal customers (highest number of previous purchases)
SELECT c.Customer_ID, c.Gender, t.Previous_Purchases
FROM customers c
JOIN transactions t ON c.Customer_ID = t.Customer_ID
ORDER BY t.Previous_Purchases DESC
LIMIT 5;